https://golang.org/dl/
上記からインストーラをダウンロードしてGoを使えるようにする。

■1.1 ハロー、ワールド
- Goはコンパイル言語で、コンパイルはbuildサブコマンドを使う。
 $ go build xxx.go
- goコマンドにはサブコマンドがいくつもあり代表例がrun。go runで1つ以上の.goファイルを指定するとコンパイルしたものの実行結果を確認できる。
 $ go run xxx.go
- GoはUnicodeを扱い、世界中のすべての言語テキストを処理できる。
- Goにはパッケージという概念があり、必要な機能はパッケージをimportして利用する。
- mainパッケージ内のmain関数からプログラムが実行される。(C++のmain関数と同じ。)
- Goはコードの書式に関して強い立場をとっている。スタイルが厳密にあり、gofmtをつかうと標準書式に成型してくれる。(ので、gofmtを積極的に使おう。)★
　- 基本的に改行は他言語のセミコロン相当に解釈される。
　- 関数の開き括弧 { は関数宣言の終わりと同じ行にないといけない。
　- ...

■1.2 コマンドライン引数
- os.Argsでプログラム実行の引数が把握できる。
- スライスとは、動的に大きさが決まる配列要素のシーケンスのようなもの。
 - 要素には[i]の添え字でアクセスする。添え字の数字は0始まり。 Ex) os.Args[1]
 - 要素数はlen(s)で得られる。 Ex) len(os.Args)
 - スライスに添え字[m:n]を適用すると、m番目からn-1番目の要素を参照するスライスになる。m, nは省略可能で、mは省略すると0が, nは省略すると最後の要素まで指定されたことになる。
　　Ex) 
- コメントは//で始める。
- var宣言で初期化をしないとその方のゼロ値となる。(整数値は0, 文字列は""など。)
- :=は省略変数宣言。初期化の値に基づき適切な型を変数に割り当てる。
- インクリメント演算子は後置のみ。かつ、インクリメントを利用した行は文であり、式として利用できない(j = i++ などとできない)。★前置・後置の戻り値の違いを理解していないためにおこるバグが発生しない。
- Goには値を2つ以上返す関数がある。★値もエラーも返してほしいケースなどで活躍しそう！
  for _, arg := range os.Args[1:] {
- _はブランク識別子と呼ばれ、変数名が必要だけどその変数を利用しないケースで利用する。 
  for _, arg := range os.Args[1:]  { // rangeの第一戻り値はindexだが、indexを利用しないケースでは_を使う。
- 以下は同じ変数宣言。初期値が重要であれば1番目の表現を、初期値が問題でないなら2番目の表現を使うのが良い。
 s := ""
 var s string
 var s = ""
 var s string = ""

■1.3 重複した行を見つける
- mapのkeyには==で比較できる値が入る。valueは何でもOK。
- valueがないindexに添え字でアクセスするとvalueがゼロ値で評価される。
- mapの繰り返しの順序は規定されておらず、むしろ実際には実行時にランダムに異なる。★暗黙のバグが防げる。すごい。
- fmt.Printfはverbと呼ぶ変換を持つ(Cのprintfみたいに%dとか%sを使う。)。慣習的にfで終わるフォーマット関数はフォーマット規則を利用する。
- goにはnilという概念があり、nilはエラーなしを意味することがある。
- 関数とほかのパッケージレベルのエンティティはどのような順序で宣言してもOK。関数呼び出しが、その関数定義の前にあってもよい。
- mapが関数へ渡される場合、その関数はmapの参照のコピーを受け取る。(呼び出し元と呼び出され側は同じmapを扱う。)

■1.4 GIFアニメーション
-  importしたパッケージはコード中では最後の要素の名前でそのパッケージを参照する。
　Ex) image/gif をimportした場合、gif.GIF{… 
- constの値は、数値、文字列、ブーリアンでなければならない。
- {}を使うとコンポジットリテラルとしてコンポジット型のインスタンスを生成できる。
    []color.Color{color.White, color.Black}
    Anim := gif.GIF{LoopCount:nframes}
- 大域的な場所で暗黙的な変数宣言する( := を使う)と以下のエラーになる。var宣言して=して対応。
     syntax error: non-declaration statement outside function body

■1.5 URLからの取得
- Goはインターネットを通した情報の送受信や低レベルネットワーク通信のためにnetパッケージが存在。
- os.Exit(1) はプロセスをステータスコード1で終了させる。

■1.6 URLからの平行な取得
- ゴルーチンは関数の閉口した実行。チャネルはゴルーチンが特定の型の値を他のゴルーチンへ渡すことを可能にする通信機構。
- 1つのゴルーチンがチャネルに対して送信または受信を試みると、そのごルーチンは他のゴルーチンが対応する受信操作あるいは送信操作を試みるまで待たされ、値が転送された時点で2つのゴルーチンは処理を先に進める。



