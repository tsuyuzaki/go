■5.1 関数宣言
- 関数宣言は、名前、パラメータのリスト、省略可能な結果のリスト、本体から構成される。
  func name(parameter-list) (result-list) {
      body
  }
- パラメータ同様結果も名前を付けることができ、名前付けをしたパラメータはその型のゼロ値のローカル変数を宣言することになる。
- 結果リストを持つ関数は、原則(panicの呼び出しで終わるか、breakのない無限forループで終わるのでなければ。) return 文で終わらないといけない。
- パラメータにはブランク識別子 "_" を使いこともでき、パラメータが使われないことを強調するために使える。
  func first(x int, _ int) { return x }
- 関数のシグニチャはパラメータの型の列と結果の方の列が同じであれば同じ。パラメータ名などは関数の型に影響しない。
- Goにはデフォルトパラメータという概念や、名前で引数を指定する方法はない。
- 引数はコピーを受け取る値渡し。しかし、ポインタ、スライス、マップ、関数、チャネルなどの何らかの種類の参照が引数に含まれていれば、関数内処理が呼び出し元の引数に影響を与えうる。
- 本体のない関数宣言を見かけた場合は、Go以外の言語で実装されている関数を示し、関数のシグニチャを定義している。

■5.2 再帰
- 関数は自分自身の関数を自分自身の関数内で呼び出す再帰呼び出しが可能。ツリー操作などをする場合に便利。
- outline の再起呼び出しでは、呼び出し先は stack のコピーを受け取る。呼び出し先が stack に要素を追加しても呼び出し元に見える要素は修正しない。呼び出し元のstackは呼び出す前と変わらない。
  func outline(stack []string, n *html.Node) {
      if n.Type == html.ElementNode {
          stack = append(stack, n.Data) // push tag
          fmt.Println(stack)
      }
      for c := n.FirstChild; c != nil; c = c.NextSibling {
          outline(stack, c)
      }
  }
- 多くのプログラミング言語は固定長の関数呼び出しスタック(大きさ64KB-2MBまでが普通)を使っている。再起呼び出しの深さに制限を課すので大きなデータ構造の再起によるスタックオーバーフローに注意が必要だが、Goは可変長スタックを使っているためスタックオーバーフローの心配はない。★
- 

